---
import path from "node:path";
interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
	size?: string; // NEW
}
import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const {
	id,
	src,
	alt,
	position = "center",
	basePath = "/",
	size = "default", // NEW
} = Astro.props;

const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// Handle dynamic imports for local images
// TypeScript error because Astro is expecting img to possibly not be assigned during runtime â€” and by explicitly saying ImageMetadata | undefined, you're covering that edge case.
let img: ImageMetadata | undefined;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

// NEW: Adjust class for different image sizes
const sizeClass = size === "small" ? "max-w-[400px] mx-auto" : "w-full";
const imageClass = `${sizeClass} h-full object-cover`;
const imageStyle = `object-position: ${position}`;
// max-w-[400px] keeps the image under 600px. you can adjust this value to your needs
// mx-auto centers it
// These utility classes do not touch your global stylesheets, and Tailwind will purge them unless used.
---

<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} style={imageStyle} />}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle} />}
</div>
